/* The following code was generated by JFlex 1.4.2 on 22.08.08 11:54 */

/* JFlex specification file for the StyledToolTip Syntax */

package org.jamesii.gui.tooltip;

import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.jamesii.SimSystem;
import org.jamesii.gui.syntaxeditor.ILexer;
import org.jamesii.gui.syntaxeditor.ILexerToken;
import org.jamesii.gui.tooltip.StyledToolTipSyntaxToken.Type;

// TODO: Auto-generated Javadoc
/**
 * This class is a lexer to tokenize the tooltip string into formating tokens
 * and text tokens.
 * 
 * @author Stefan Rybacki (using JFlex)
 */
/*
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.2 on 22.08.08 11:54 from the specification file <tt>C:/Documents and
 * Settings/stefan/Desktop/James II Dev/James II
 * Trunk/core/src/org/jamesii/gui/docking/swing/tooltip/StyledToolTip.flex</tt>
 */
class StyledToolTipLexer implements ILexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states. */
  public static final int COLOR = 4;

  /** The Constant FONT. */
  public static final int FONT = 12;

  /** The Constant PRETEXT. */
  public static final int PRETEXT = 16;

  /** The Constant HEIGHT. */
  public static final int HEIGHT = 10;

  /** The Constant BGCOLOR. */
  public static final int BGCOLOR = 6;

  /** The Constant YYINITIAL. */
  public static final int YYINITIAL = 0;

  /** The Constant FONTSIZE. */
  public static final int FONTSIZE = 14;

  /** The Constant WIDTH. */
  public static final int WIDTH = 8;

  /** The Constant TEXT. */
  public static final int TEXT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
   * beginning of a line l is of the form l = 2*k, k a non negative integer.
   */
  private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
      5, 6, 6, 7, 7, 8, 8 };

  /** Translates characters to character classes. */
  private static final String ZZ_CMAP_PACKED =
      "\11\0\1\14\1\2\1\0\1\14\1\1\22\0\1\14\16\0\1\6"
          + "\14\0\1\3\1\0\1\7\43\0\1\4\1\21\1\26\1\13\1\15"
          + "\1\24\1\23\1\10\2\0\1\22\1\0\1\17\1\16\1\30\1\0"
          + "\1\5\1\11\1\20\1\27\1\0\1\25\2\0\1\12\uff85\0";

  /** Translates characters to character classes. */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** Translates DFA states to action switch labels. */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  /** The Constant ZZ_ACTION_PACKED_0. */
  private static final String ZZ_ACTION_PACKED_0 =
      "\11\0\1\1\2\2\1\1\1\3\2\4\1\3\15\5"
          + "\1\3\1\2\13\0\1\4\12\0\1\6\1\0\1\7"
          + "\1\0\1\10\1\0\1\11\1\0\1\12\1\0\1\13"
          + "\3\0\1\14\6\0\1\15\2\0\1\16\4\0\1\17"
          + "\16\0\1\6\2\0\1\7\2\0\1\10\2\0\1\11"
          + "\2\0\1\12\2\0\1\13\1\20\2\0\1\21\1\22"
          + "\1\23\1\24\21\0\1\6\1\0\1\7\1\0\1\10"
          + "\1\0\1\11\1\0\1\12\1\0\1\13\1\2\5\0"
          + "\1\25\2\0\1\26\2\0\1\4\6\0\1\27\1\30"
          + "\2\0\1\31\4\0\1\25\2\0\1\32\2\0\1\33"
          + "\1\0\1\34\2\0\1\35\1\36\1\0\1\25\2\0"
          + "\1\37\1\0\1\40\2\0\1\35\1\0\1\36\1\41"
          + "\1\0\1\42\1\43\1\0\1\35\1\36\1\0\1\41"
          + "\1\44\1\0\1\42\1\45\1\41\1\0\1\44\1\42" + "\1\0\1\45\1\44\1\45";

  /** Translates a state to a row index in the transition table. */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  /** The Constant ZZ_ROWMAP_PACKED_0. */
  private static final String ZZ_ROWMAP_PACKED_0 =
      "\0\0\0\31\0\62\0\113\0\144\0\175\0\226\0\257"
          + "\0\310\0\341\0\372\0\u0113\0\u012c\0\341\0\u0145\0\u015e"
          + "\0\u0177\0\341\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d"
          + "\0\u0226\0\u023f\0\u0258\0\u0271\0\u028a\0\u02a3\0\u02bc\0\341"
          + "\0\u02d5\0\u02ee\0\u0307\0\u0320\0\u0339\0\u0352\0\u036b\0\u0384"
          + "\0\u039d\0\u03b6\0\u03cf\0\341\0\u03e8\0\u0401\0\u041a\0\u0433"
          + "\0\u044c\0\u0465\0\u047e\0\u0497\0\u04b0\0\u04c9\0\u04e2\0\u04fb"
          + "\0\u0514\0\u052d\0\u0546\0\u055f\0\u0578\0\u0591\0\u05aa\0\u05c3"
          + "\0\u05dc\0\u05f5\0\u060e\0\u0627\0\341\0\u0640\0\u0659\0\u0672"
          + "\0\u068b\0\u06a4\0\u06bd\0\341\0\u06d6\0\u06ef\0\341\0\u0708"
          + "\0\u0721\0\u073a\0\u0753\0\341\0\u076c\0\u0785\0\u079e\0\u07b7"
          + "\0\u07d0\0\u07e9\0\u0802\0\u081b\0\u0834\0\u084d\0\u0866\0\u087f"
          + "\0\u0898\0\u08b1\0\u08ca\0\u08e3\0\u08fc\0\u0915\0\u092e\0\u0947"
          + "\0\u0960\0\u0979\0\u0992\0\u09ab\0\u09c4\0\u09dd\0\u09f6\0\u0a0f"
          + "\0\u0a28\0\u0a41\0\341\0\u0a5a\0\u0a73\0\341\0\341\0\341"
          + "\0\341\0\u0a8c\0\u0aa5\0\u0abe\0\u0ad7\0\u0af0\0\u0b09\0\u0b22"
          + "\0\u0b3b\0\u0b54\0\u0b6d\0\u0b86\0\u0b9f\0\u0bb8\0\u0bd1\0\u0bea"
          + "\0\u0c03\0\u0c1c\0\341\0\u0c35\0\341\0\u0c4e\0\341\0\u0c67"
          + "\0\341\0\u0c80\0\341\0\u0c99\0\341\0\u0cb2\0\u0ccb\0\u0ce4"
          + "\0\u0cfd\0\u0d16\0\u0d2f\0\u0d48\0\u0d61\0\u0d7a\0\341\0\u0d93"
          + "\0\u0dac\0\u0dc5\0\u0dde\0\u0df7\0\u0e10\0\u0e29\0\u0e42\0\u0e5b"
          + "\0\u0e74\0\u0e8d\0\372\0\u0ea6\0\341\0\u0ebf\0\u0ed8\0\u0ef1"
          + "\0\u0f0a\0\u0f23\0\u0f3c\0\u0f55\0\341\0\u0f6e\0\u0145\0\u0f87"
          + "\0\u0fa0\0\u0fb9\0\u0fd2\0\u0feb\0\u1004\0\u101d\0\u1036\0\341"
          + "\0\u104f\0\u1068\0\341\0\u1081\0\u109a\0\u10b3\0\u10cc\0\u10e5"
          + "\0\u10fe\0\u1117\0\u1130\0\u1149\0\u1162\0\u117b\0\u1194\0\341"
          + "\0\341\0\u11ad\0\u11c6\0\u11df\0\u11f8\0\u1211\0\u122a\0\341"
          + "\0\u1243\0\u125c\0\341\0\u1275\0\u128e\0\341\0\341";

  /** The transition table of the DFA. */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  /** The Constant ZZ_TRANS_PACKED_0. */
  private static final String ZZ_TRANS_PACKED_0 =
      "\1\12\1\13\1\14\1\15\25\12\1\16\1\17\1\20"
          + "\1\21\25\16\3\22\1\23\2\22\1\24\25\22\1\25"
          + "\2\22\1\26\25\22\1\27\2\22\1\30\25\22\1\31"
          + "\2\22\1\32\25\22\1\33\2\22\1\34\25\22\1\35"
          + "\2\22\1\36\22\22\3\16\1\37\25\16\33\0\1\40"
          + "\27\0\1\40\32\0\1\41\1\42\1\0\1\43\1\0"
          + "\1\44\1\45\3\0\1\46\3\0\1\47\1\0\1\50"
          + "\1\0\1\51\1\0\1\52\1\53\2\0\1\54\27\0"
          + "\1\54\32\0\1\55\1\56\1\0\1\57\1\0\1\60"
          + "\1\61\3\0\1\62\3\0\1\63\1\0\1\64\3\0"
          + "\1\60\1\65\21\0\1\66\16\0\1\67\25\0\1\70"
          + "\33\0\1\71\46\0\1\72\12\0\1\73\44\0\1\74"
          + "\14\0\1\75\36\0\1\76\22\0\1\77\32\0\1\100"
          + "\26\0\1\101\27\0\1\102\30\0\1\103\27\0\1\104"
          + "\1\0\1\105\14\0\1\106\10\0\1\107\3\0\1\110"
          + "\10\0\1\111\5\0\1\112\1\113\7\0\1\114\31\0"
          + "\1\115\36\0\1\116\21\0\1\117\6\0\1\120\17\0"
          + "\1\121\5\0\1\122\25\0\1\123\27\0\1\124\26\0"
          + "\1\125\10\0\1\126\10\0\1\127\7\0\1\60\27\0"
          + "\1\130\1\0\1\54\14\0\1\131\10\0\1\60\3\0"
          + "\1\60\10\0\1\60\5\0\1\60\1\132\7\0\1\54"
          + "\31\0\1\133\36\0\1\134\21\0\1\54\6\0\1\135"
          + "\17\0\1\130\30\0\1\136\10\0\1\137\10\0\1\140"
          + "\17\0\1\141\13\0\1\142\1\143\52\0\1\144\5\0"
          + "\1\145\1\146\36\0\1\147\21\0\1\150\1\151\41\0"
          + "\1\152\16\0\1\153\1\154\44\0\1\155\13\0\1\156"
          + "\1\157\36\0\1\160\21\0\1\161\1\162\56\0\1\132"
          + "\7\0\1\163\27\0\1\164\43\0\1\165\16\0\1\166"
          + "\30\0\1\167\30\0\1\170\30\0\1\171\26\0\1\172"
          + "\35\0\1\173\35\0\1\174\33\0\1\175\14\0\1\176"
          + "\32\0\1\177\46\0\1\200\15\0\1\201\45\0\1\202"
          + "\11\0\1\203\25\0\1\204\43\0\1\205\14\0\1\136"
          + "\35\0\1\206\35\0\1\207\33\0\1\210\21\0\1\60"
          + "\45\0\1\55\11\0\1\211\41\0\1\212\10\0\1\213"
          + "\27\0\1\213\50\0\1\214\11\0\1\215\27\0\1\215"
          + "\55\0\1\216\4\0\1\217\27\0\1\217\37\0\1\220"
          + "\22\0\1\221\27\0\1\221\46\0\1\222\13\0\1\223"
          + "\27\0\1\223\41\0\1\224\20\0\1\225\27\0\1\225"
          + "\36\0\1\226\37\0\1\227\25\0\1\230\30\0\1\231"
          + "\35\0\1\232\26\0\1\233\21\0\1\234\45\0\1\235"
          + "\24\0\1\236\17\0\1\237\27\0\1\240\45\0\1\241"
          + "\14\0\1\242\37\0\1\135\25\0\1\243\35\0\1\243"
          + "\26\0\1\244\35\0\1\55\23\0\1\245\30\0\1\246"
          + "\32\0\1\247\34\0\1\250\24\0\1\251\23\0\1\252"
          + "\16\0\1\253\1\14\50\0\1\254\15\0\1\255\21\0"
          + "\6\231\1\256\22\231\6\232\1\257\22\232\5\0\1\260"
          + "\24\0\1\261\1\262\51\0\1\263\30\0\1\264\14\0"
          + "\1\265\27\0\1\266\23\0\1\267\1\20\26\0\6\243"
          + "\1\204\22\243\5\0\1\243\30\0\1\270\45\0\1\271"
          + "\31\0\1\272\30\0\1\273\21\0\1\251\30\0\1\252"
          + "\32\0\1\274\21\0\1\275\30\0\1\276\21\0\6\260"
          + "\1\277\22\260\2\0\1\300\27\0\1\300\47\0\1\301"
          + "\10\0\6\264\1\302\22\264\7\0\1\303\35\0\1\270"
          + "\32\0\1\304\26\0\1\272\34\0\1\305\15\0\1\306"
          + "\24\0\1\307\1\310\27\0\1\311\1\312\35\0\1\313"
          + "\21\0\6\301\1\314\22\301\7\0\1\315\26\0\1\316"
          + "\37\0\1\305\14\0\6\306\1\317\22\306\2\0\1\320"
          + "\27\0\1\320\31\0\1\321\27\0\1\321\30\0\1\322"
          + "\1\323\35\0\1\324\22\0\1\325\1\326\42\0\1\316"
          + "\23\0\1\327\23\0\1\330\27\0\1\330\30\0\1\331"
          + "\1\332\30\0\1\333\27\0\1\333\30\0\1\334\1\335"
          + "\30\0\1\336\27\0\1\336\31\0\1\337\27\0\1\337" + "\27\0";

  /* error codes */
  /** The Constant ZZ_UNKNOWN_ERROR. */
  private static final int ZZ_UNKNOWN_ERROR = 0;

  /** The Constant ZZ_NO_MATCH. */
  private static final int ZZ_NO_MATCH = 1;

  /** The Constant ZZ_PUSHBACK_2BIG. */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  /** The Constant ZZ_ERROR_MSG. */
  private static final String ZZ_ERROR_MSG[] = {
      "Unkown internal scanner error", "Error: could not match input",
      "Error: pushback value was too large" };

  /** ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>. */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  /** The Constant ZZ_ATTRIBUTE_PACKED_0. */
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\11\0\1\11\3\1\1\11\3\1\1\11\15\1\1\11"
          + "\13\0\1\11\12\0\1\1\1\0\1\1\1\0\1\1"
          + "\1\0\1\1\1\0\1\1\1\0\1\1\3\0\1\11"
          + "\6\0\1\11\2\0\1\11\4\0\1\11\16\0\1\1"
          + "\2\0\1\1\2\0\1\1\2\0\1\1\2\0\1\1"
          + "\2\0\1\1\1\11\2\0\4\11\21\0\1\11\1\0"
          + "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"
          + "\1\11\1\1\5\0\1\1\2\0\1\11\2\0\1\1"
          + "\6\0\2\1\2\0\1\11\4\0\1\1\2\0\1\11"
          + "\2\0\1\1\1\0\1\1\2\0\2\1\1\0\1\11"
          + "\2\0\1\11\1\0\1\1\2\0\1\1\1\0\2\1"
          + "\1\0\2\1\1\0\2\11\1\0\2\1\1\0\2\1"
          + "\1\11\1\0\1\1\1\11\1\0\1\1\2\11";

  /**
   * Zz unpack action.
   * 
   * @return the int[]
   */
  private static int[] zzUnpackAction() {
    int[] result = new int[223];
    int offset = 0;
    zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  /**
   * Zz unpack action.
   * 
   * @param packed
   *          the packed
   * @param offset
   *          the offset
   * @param result
   *          the result
   * 
   * @return the int
   */
  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do {
        result[j++] = value;
      } while (--count > 0);
    }
    return j;
  }

  /**
   * Zz unpack attribute.
   * 
   * @return the int[]
   */
  private static int[] zzUnpackAttribute() {
    int[] result = new int[223];
    int offset = 0;
    zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  /**
   * Zz unpack attribute.
   * 
   * @param packed
   *          the packed
   * @param offset
   *          the offset
   * @param result
   *          the result
   * 
   * @return the int
   */
  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do {
        result[j++] = value;
      } while (--count > 0);
    }
    return j;
  }

  /**
   * Unpacks the compressed character translation table.
   * 
   * @param packed
   *          the packed character translation table
   * 
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0; /* index in packed string */
    int j = 0; /* index in unpacked array */
    while (i < 78) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do {
        map[j++] = value;
      } while (--count > 0);
    }
    return map;
  }

  /**
   * Zz unpack row map.
   * 
   * @return the int[]
   */
  private static int[] zzUnpackRowMap() {
    int[] result = new int[223];
    int offset = 0;
    zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  /**
   * Zz unpack row map.
   * 
   * @param packed
   *          the packed
   * @param offset
   *          the offset
   * @param result
   *          the result
   * 
   * @return the int
   */
  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * Zz unpack trans.
   * 
   * @return the int[]
   */
  private static int[] zzUnpackTrans() {
    int[] result = new int[4775];
    int offset = 0;
    zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  /**
   * Zz unpack trans.
   * 
   * @param packed
   *          the packed
   * @param offset
   *          the offset
   * @param result
   *          the result
   * 
   * @return the int
   */
  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do {
        result[j++] = value;
      } while (--count > 0);
    }
    return j;
  }

  /** the input device. */
  private java.io.Reader zzReader;

  /** the current state of the DFA. */
  private int zzState;

  /** the current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is the source of
   * the yytext() string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state. */
  private int zzMarkedPos;

  /** the current text position in the buffer. */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer. */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read from
   * input.
   */
  private int zzEndRead;

  /** the number of characters up to the start of the matched text. */
  private int yychar;

  /** zzAtEOF == true <=> the scanner is at the EOF. */
  private boolean zzAtEOF;

  /* user code: */
  /** The problem tokens. */
  private List<ILexerToken> problemTokens = new ArrayList<>();

  /** The syntax tokens. */
  private List<ILexerToken> syntaxTokens = new ArrayList<>();

  /** The value. */
  private StringBuffer value = new StringBuffer();

  /**
   * helper field to get the original text or color value starting positions in
   * case of state changes.
   */
  private int textstart;

  /**
   * field that indicates whether the parsing should be stop at the next
   * possible point.
   */
  protected boolean stop;

  /**
   * Creates the lexer.
   */
  public StyledToolTipLexer() {
  }

  /**
   * Creates a new scanner. There is also java.io.Reader version of this
   * constructor.
   * 
   * @param in
   *          the java.io.Inputstream to read input from.
   */
  public StyledToolTipLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Creates a new scanner There is also a java.io.InputStream version of this
   * constructor.
   * 
   * @param in
   *          the java.io.Reader to read input from.
   */
  public StyledToolTipLexer(java.io.Reader in) {
    zzReader = in;
  }

  /**
   * Helper method that generates syntax and problem tokens that can be used for
   * further parsing as well as syntax highlighting.
   * 
   * @throws IOException
   *           Signals that an I/O exception has occurred.
   */
  private void generateTokens() throws IOException {
    syntaxTokens.clear();
    problemTokens.clear();

    StyledToolTipSyntaxToken t;
    while ((t = yylex()) != null && !stop) {
      syntaxTokens.add(t);
    }
    Collections.sort(syntaxTokens);
    Collections.sort(problemTokens);
  }

  @Override
  public List<ILexerToken> getSyntaxTokens() {
    return syntaxTokens;
  }

  @Override
  public void parse(Reader input) {
    stop = false;
    yyreset(input);
    try {
      generateTokens();
    } catch (IOException e) {
      SimSystem.report(e);
    }
  }

  @Override
  public void stopParsing() {
    stop = true;
  }

  /**
   * Helper function that returns a StyledTooltipSyntaxToken with the specified
   * type.
   * 
   * @param type
   *          the token type
   * 
   * @return token of specified type with the calculated start position and
   *         length value
   */
  private StyledToolTipSyntaxToken symbol(Type type) {
    return new StyledToolTipSyntaxToken(type, yychar, yylength());
  }

  /**
   * Enters a new lexical state.
   * 
   * @param newState
   *          the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the character at position <tt>pos</tt> from the matched text.
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   * 
   * @param pos
   *          the position of the character to fetch. A value from 0 to
   *          yylength()-1.
   * 
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }

  /**
   * Closes the input stream.
   * 
   * @throws IOException
   *           Signals that an I/O exception has occurred.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; /* indicate end of file */
    zzEndRead = zzStartRead; /* invalidate buffer */

    if (zzReader != null) {
      zzReader.close();
    }
  }

  /**
   * Returns the length of the matched text region.
   * 
   * @return the int
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of
   * input is encountered or an I/O-Error occurs.
   * 
   * @return the next token
   * 
   * @throws IOException
   *           Signals that an I/O exception has occurred.
   * 
   * @exception java.io.IOException
   *              if any I/O-Error occurs
   */
  public StyledToolTipSyntaxToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar += zzMarkedPosL - zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL[zzCurrentPosL++];
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            zzInput = zzBufferL[zzCurrentPosL++];
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1) {
            break zzForAction;
          }
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) {
              break zzForAction;
            }
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
      case 3: { /* ignore */
      }
      case 38:
        break;
      case 25: {
        return symbol(Type.PREOFF);
      }
      case 39:
        break;
      case 16: {
        return symbol(Type.LESSTHAN);
      }
      case 40:
        break;
      case 20: {
        return symbol(Type.UNDERLINEOFF);
      }
      case 41:
        break;
      case 19: {
        return symbol(Type.CROSSOUTOFF);
      }
      case 42:
        break;
      case 32: {
        textstart = yychar + yylength();
        return symbol(Type.HEIGHTSTART);
      }
      case 43:
        break;
      case 7: {
        yybegin(YYINITIAL);
        return new StyledToolTipSyntaxToken(Type.BGCOLORVALUE, textstart,
            yychar - textstart, value.substring(0));
      }
      case 44:
        break;
      case 17: {
        return symbol(Type.BOLDOFF);
      }
      case 45:
        break;
      case 12: {
        return symbol(Type.BOLDON);
      }
      case 46:
        break;
      case 29: {
        yypushback(yylength());
        yybegin(FONTSIZE);
        value.setLength(0);
      }
      case 47:
        break;
      case 1: {
        yybegin(TEXT);
        textstart = yychar;
      }
      case 48:
        break;
      case 21: {
        return symbol(Type.LINE);
      }
      case 49:
        break;
      case 4: {
        yypushback(yylength());
        yybegin(YYINITIAL);
        return new StyledToolTipSyntaxToken(Type.TEXT, textstart, yychar
            - textstart);
      }
      case 50:
        break;
      case 37: {
        yypushback(yylength());
        yybegin(BGCOLOR);
        value.setLength(0);
      }
      case 51:
        break;
      case 24: {
        textstart = yychar + yylength();
        return symbol(Type.FONTSIZESTART);
      }
      case 52:
        break;
      case 23: {
        textstart = yychar + yylength();
        return symbol(Type.FONTSTART);
      }
      case 53:
        break;
      case 2: {
        return symbol(Type.LINEBREAK);
      }
      case 54:
        break;
      case 8: {
        yybegin(YYINITIAL);
        return new StyledToolTipSyntaxToken(Type.WIDTHVALUE, textstart, yychar
            - textstart, value.substring(0));
      }
      case 55:
        break;
      case 35: {
        textstart = yychar + yylength();
        return symbol(Type.BGCOLORSTART);
      }
      case 56:
        break;
      case 10: {
        yybegin(YYINITIAL);
        return new StyledToolTipSyntaxToken(Type.FONTVALUE, textstart, yychar
            - textstart, value.substring(0));
      }
      case 57:
        break;
      case 15: {
        return symbol(Type.UNDERLINEON);
      }
      case 58:
        break;
      case 5: {
        value.append(yytext());
      }
      case 59:
        break;
      case 18: {
        return symbol(Type.ITALICOFF);
      }
      case 60:
        break;
      case 28: {
        textstart = yychar + yylength();
        return symbol(Type.WIDTHSTART);
      }
      case 61:
        break;
      case 26: {
        return symbol(Type.POPSTATE);
      }
      case 62:
        break;
      case 11: {
        yybegin(YYINITIAL);
        return new StyledToolTipSyntaxToken(Type.FONTSIZEVALUE, textstart,
            yychar - textstart, value.substring(0));
      }
      case 63:
        break;
      case 36: {
        yypushback(yylength());
        yybegin(HEIGHT);
        value.setLength(0);
      }
      case 64:
        break;
      case 6: {
        yybegin(YYINITIAL);
        return new StyledToolTipSyntaxToken(Type.COLORVALUE, textstart, yychar
            - textstart, value.substring(0));
      }
      case 65:
        break;
      case 31: {
        return symbol(Type.PUSHSTATE);
      }
      case 66:
        break;
      case 33: {
        yypushback(yylength());
        yybegin(COLOR);
        value.setLength(0);
      }
      case 67:
        break;
      case 22: {
        textstart = yychar + yylength();
        yybegin(PRETEXT);
        return symbol(Type.PREON);
      }
      case 68:
        break;
      case 9: {
        yybegin(YYINITIAL);
        return new StyledToolTipSyntaxToken(Type.HEIGHTVALUE, textstart, yychar
            - textstart, value.substring(0));
      }
      case 69:
        break;
      case 27: {
        textstart = yychar + yylength();
        return symbol(Type.COLORSTART);
      }
      case 70:
        break;
      case 13: {
        return symbol(Type.ITALICON);
      }
      case 71:
        break;
      case 30: {
        yypushback(yylength());
        yybegin(FONT);
        value.setLength(0);
      }
      case 72:
        break;
      case 34: {
        yypushback(yylength());
        yybegin(WIDTH);
        value.setLength(0);
      }
      case 73:
        break;
      case 14: {
        return symbol(Type.CROSSOUTON);
      }
      case 74:
        break;
      default:
        if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
          zzAtEOF = true;
          switch (zzLexicalState) {
          case COLOR: {
            yybegin(YYINITIAL);
            return new StyledToolTipSyntaxToken(Type.TEXT, textstart, yychar
                - textstart);
          }
          case 224:
            break;
          case FONT: {
            yybegin(YYINITIAL);
            return new StyledToolTipSyntaxToken(Type.TEXT, textstart, yychar
                - textstart);
          }
          case 225:
            break;
          case PRETEXT: {
            yybegin(YYINITIAL);
            return new StyledToolTipSyntaxToken(Type.TEXT, textstart, yychar
                - textstart);
          }
          case 226:
            break;
          case HEIGHT: {
            yybegin(YYINITIAL);
            return new StyledToolTipSyntaxToken(Type.TEXT, textstart, yychar
                - textstart);
          }
          case 227:
            break;
          case BGCOLOR: {
            yybegin(YYINITIAL);
            return new StyledToolTipSyntaxToken(Type.TEXT, textstart, yychar
                - textstart);
          }
          case 228:
            break;
          case FONTSIZE: {
            yybegin(YYINITIAL);
            return new StyledToolTipSyntaxToken(Type.TEXT, textstart, yychar
                - textstart);
          }
          case 229:
            break;
          case WIDTH: {
            yybegin(YYINITIAL);
            return new StyledToolTipSyntaxToken(Type.TEXT, textstart, yychar
                - textstart);
          }
          case 230:
            break;
          case TEXT: {
            yybegin(YYINITIAL);
            return new StyledToolTipSyntaxToken(Type.TEXT, textstart, yychar
                - textstart);
          }
          case 231:
            break;
          default:
            return null;
          }
        } else {
          zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   * 
   * They will be read again by then next call of the scanning method
   * 
   * @param number
   *          the number of characters to be read again. This number must not be
   *          greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength()) {
      zzScanError(ZZ_PUSHBACK_2BIG);
    }

    zzMarkedPos -= number;
  }

  /**
   * Resets the scanner to read from a new input stream. Does not close the old
   * reader.
   * 
   * All internal variables are reset, the old input stream <b>cannot</b> be
   * reused (internal buffer is discarded and lost). Lexical state is set to
   * <tt>ZZ_INITIAL</tt>.
   * 
   * @param reader
   *          the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtEOF = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yychar = 0;
    zzLexicalState = YYINITIAL;
  }

  /**
   * Returns the current lexical state.
   * 
   * @return the int
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Returns the text matched by the current regular expression.
   * 
   * @return the string
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Refills the input buffer.
   * 
   * @return <code>false</code>, iff there was new input.
   * 
   * @throws IOException
   *           Signals that an I/O exception has occurred.
   * 
   * @exception java.io.IOException
   *              if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
          - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead =
        zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

    if (numRead > 0) {
      zzEndRead += numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      }
      zzBuffer[zzEndRead++] = (char) c;
      return false;
    }

    // numRead < 0
    return true;
  }

  /**
   * Reports an error that occured while scanning.
   * 
   * In a wellformed scanner (no or only correct usage of yypushback(int) and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen". If this method is called, something is seriously
   * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
   * 
   * Usual syntax/scanner level error handling should be done in error fallback
   * rules.
   * 
   * @param errorCode
   *          the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

}
