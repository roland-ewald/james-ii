/*
 * The general modeling and simulation framework JAMES II.
 * Copyright by the University of Rostock.
 * 
 * LICENCE: JAMESLIC
 */
package org.jamesii.gui.syntaxeditor;

import java.io.Reader;
import java.util.List;

/**
 * To support custom syntax highlighting using {@link SyntaxEditorKit} it is
 * needed to provide a lexer which implements this interface.
 * 
 * @see ILexerToken
 * @see SyntaxEditorKit
 * @see DefaultLexerToken
 * 
 * @author Stefan Rybacki
 * 
 */
public interface ILexer {
  /**
   * This method is called by {@link SyntaxEditorDocument} whenever its content
   * changed. The document's content is provided as {@link Reader} and passed in
   * as parameter. Since the {@link #parse(Reader)} method is called quite often
   * it should rather be fast implemented.
   * 
   * @param input
   *          the text to parse
   * 
   */
  void parse(Reader input);

  /**
   * This method is meant to be called when the parsing should be stop because
   * for instance the content to parsed changed while parsing and a reparse is
   * needed. This method should only return once the parsing has stopped or no
   * parsing was currently running.
   */
  void stopParsing();

  /**
   * This method should return a list of syntax tokens generated by the parse
   * method. This method is called even more often than {@link #parse(Reader)},
   * so rather provide cached access to the provided tokens and just update them
   * when {@link #parse(Reader)} is called.
   * 
   * @return a list of {@link ILexerToken} ordered in order of appearance in
   *         input they are not allowed to overlap
   */
  List<? extends ILexerToken> getSyntaxTokens();

}
