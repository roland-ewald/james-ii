/*
 * The general modelling and simulation framework JAMES II.
 * Copyright by the University of Rostock.
 *
 * LICENCE: JAMESLIC
 */
package simulator.mlspace.brownianmotion;

import model.mlspace.entities.spatial.IMoveableEntity;

import org.jamesii.core.math.geometry.vectors.IDisplacementVector;

/**
 * Interface for position update methods. Actual position update method classes
 * shall implement one of the subinterfaces {@link IContinuousPositionUpdater}
 * or {@link IDiscretePositionUpdater}, not this one directly.
 *
 * Creation date: 20.04.2011
 *
 * @author Arne Bittig
 */
public interface IPositionUpdater extends java.io.Serializable {

  /**
   * Position update vector for given movement parameters and time difference
   * (For discrete-distance updates, may assume deltaT was previously determined
   * by {@link #getReasonableTimeToNextUpdate(IMoveableEntity)} and may ignore
   * its actual value entirely.)
   * 
   * @param deltaT
   *          Time since last position update
   * @param comp
   *          Moveable entity
   * @return Relative vector for position update
   */
  IDisplacementVector getPositionUpdate(double deltaT, IMoveableEntity comp);

  /**
   * Get (relative) time when the next position update should be performed. This
   * may be a likely or exact time to fulfillment of a condition like
   * "distance traveled until then is at least x" (where x is an instance
   * parameter in the implementing class).
   * 
   * @param comp
   *          Moveable entity (whose diffusion constant will be accessed)
   * @return Update time such that steps fulfill a certain condition (part of
   *         the implementing class' contract) in the limit
   */
  double getReasonableTimeToNextUpdate(IMoveableEntity comp);

  /**
   * Adjust update vector generated elsewhere to confirm to restrictions imposed
   * by the implementing class (e.g. find next point in internal grid for an
   * implementation allowing only fixed distance updates). Although the method
   * is needed primarily for {@link IDiscretePositionUpdater} (and
   * implementations of {@link IContinuousPositionUpdater} can just return the
   * argument itself) it is provided in the base interface here as otherwise the
   * former could not be used correctly where simple {@link IPositionUpdater}s
   * are required and position updates can also be generated by other means than
   * the updater itself. In any case, it shall be ensured that scaling an
   * adjusted vector by an integer number and adding adjusted vectors results in
   * vectors that need not be adjusted, i.e. for which adjustUpdateVector(v)
   * would return a value equal (or even identical) to v.
   * 
   * Shall return a vector where each coordinate is a multiple of the grid size
   * in the respective direction and each value's absolute value is the smallest
   * one that is not smaller than the respective value of contV (i.e. the next
   * grid point in the direction away from the origin).
   * 
   * @param contV
   *          displacement vector in continuous space
   * @return adjusted displacement, e.g. discrete approximation of contV
   */
  IDisplacementVector adjustUpdateVector(IDisplacementVector contV);

}