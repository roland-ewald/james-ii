/*
 * The general modelling and simulation framework JAMES II.
 * Copyright by the University of Rostock.
 * 
 * LICENCE: JAMESLIC
 */
package org.jamesii.core.experiments.variables;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jamesii.ChattyTestCase;
import org.jamesii.core.experiments.BaseExperiment;
import org.jamesii.core.experiments.TaskConfiguration;
import org.jamesii.core.experiments.TestExecSetup;
import org.jamesii.core.experiments.variables.modifier.IncrementModifierInteger;
import org.jamesii.core.experiments.variables.modifier.SequenceModifier;
import org.jamesii.core.parameters.ParameterBlock;
import org.jamesii.core.util.misc.Strings;

/**
 * Tests for {@link ExperimentVariables}. All tests were written with the
 * three-argument {@link ExperimentVariable} constructor in mind before there
 * were {@link ExperimentVariable#ExperimentVariable(String, Object)} and
 * {@link ExperimentVariable#ExperimentVariable(String, org.jamesii.core.experiments.variables.modifier.IVariableModifier)}
 * .
 * 
 * @author Roland Ewald 
 */
public class ExperimentVariablesTest extends ChattyTestCase {

  /**
   * The experiment to test the steering.
   */
  protected TestBaseExperiment testExperiment;

  @Override
  public void setUp() {
    testExperiment = new TestBaseExperiment();
    List<ExperimentVariable<?>> variables = new ArrayList<>();
    variables.add(new ExperimentVariable<>("a", -1,
        new IncrementModifierInteger(1, 1, 2)));
    variables.add(new ExperimentVariable<>("b", -1,
        new IncrementModifierInteger(10, 2, 12)));
    variables.add(new ExperimentVariable<>("c", -1,
        new IncrementModifierInteger(97, 2, 99)));
    testExperiment.setupVariables(variables);

    testExperiment.getExperimentVariables().addVariable(
        new ExperimentVariable<>("a2", -1,
            new IncrementModifierInteger(5, 1, 6)));
  }

  /**
   * Tests the generation of parameters.
   */
  public void testParameterGeneration() {
    ExperimentVariables expVariables = testExperiment.getExperimentVariables();

    expVariables.init(expVariables);
    List<TestExecSetup> paramSetups1 = getSetups(expVariables);
    expVariables.init(expVariables);
    List<TestExecSetup> paramSetups2 = getSetups(expVariables);
    expVariables.reset(expVariables);
    expVariables.reset(expVariables);
    expVariables.reset(expVariables);
    expVariables.init(expVariables);
    List<TestExecSetup> paramSetups3 = getSetups(expVariables);

    // If setup number is smaller, exact size is not known beforehand
    if (getSetupNumber() > 0) {
      assertEquals(getSetupNumber(), paramSetups1.size());
    }
    assertEquals(TestExecSetup.getMapList(paramSetups1),
        TestExecSetup.getMapList(paramSetups2));
    assertEquals(TestExecSetup.getMapList(paramSetups2),
        TestExecSetup.getMapList(paramSetups3));

    // Without initialisation, there should be no additional setups
    List<TestExecSetup> paramSetups4 = getSetups(expVariables);
    assertEquals(0, paramSetups4.size());
  }

  /**
   * Tests parameter combination generation in case one of the modifiers is
   * null.
   */
  public void testNullModifier() {
    BaseExperiment exp = new BaseExperiment();

    List<Integer> firstLevel = new ArrayList<>();
    firstLevel.add(1);
    firstLevel.add(2);

    List<Integer> secondLevel = new ArrayList<>();
    secondLevel.add(1);
    secondLevel.add(2);

    List<Integer> thirdLevel = new ArrayList<>();
    thirdLevel.add(0);

    List<ExperimentVariable<?>> expVars = new ArrayList<>();
    expVars.add(new ExperimentVariable<>("1", firstLevel.get(0),
        new SequenceModifier<>(firstLevel)));
    expVars.add(new ExperimentVariable<>("2", secondLevel.get(0),
        new SequenceModifier<>(secondLevel)));
    expVars.add(new ExperimentVariable<>("load", 0, null));

    exp.setupVariables(expVars);
    exp.getExperimentVariables().init(exp.getExperimentVariables());
    List<TestExecSetup> paramSetups = getSetups(exp.getExperimentVariables());
    for (int i = 0; i < paramSetups.size(); i++) {
      addInformation("#" + (i + 1) + ": "
          + Strings.dispMap(paramSetups.get(i).getFirstValue()));
    }
    assertEquals(firstLevel.size() * secondLevel.size(), paramSetups.size());
  }

  /**
   * Get number of expected setups (needs to be overridden by subclasses).
   * 
   * @return number of expected setups
   */
  protected int getSetupNumber() {
    return 8;
  }

  /**
   * Retrieves list of setups that are generated by the experiment. In other
   * words, this function 'simulates' the execution of a base experiment.
   * 
   * @param expVariables
   *          experiment variables to be used for setup generation
   * @return list of setups, i.e. parameter mappings and associated parameter
   *         blocks
   */
  protected List<TestExecSetup> getSetups(ExperimentVariables expVariables) {
    List<TestExecSetup> paramSetups = new ArrayList<>();
    while (expVariables.next(expVariables) != SubLevelStatus.DONE) {
      Map<String, Object> paramMap = new HashMap<>();
      ParameterBlock parameters = new ParameterBlock();
      expVariables.storeSettingToMap(paramMap, parameters, true);
      paramSetups.add(new TestExecSetup(paramMap, parameters));
    }
    return paramSetups;
  }

  /**
   * Gets the test experiment.
   * 
   * @return the test experiment
   */
  protected BaseExperiment getTestExperiment() {
    return testExperiment;
  }

  /**
   * Gets the test experiment task configurations as they would be generated by
   * the test experiment (see {@link #getTestExperiment()}).
   * 
   * @return the test experiment task configurations
   */
  protected List<TaskConfiguration> getTestExperimentTaskConfigs() {
    testExperiment.getExperimentVariables().init(
        testExperiment.getExperimentVariables());
    return testExperiment.getTaskConfigs(true);
  }
}

/**
 * The same as a normal base experiment, but we can generate jobs manually.
 * 
 * @author Roland Ewald
 */
class TestBaseExperiment extends BaseExperiment {

  private static final long serialVersionUID = 7297113275447324979L;

  public List<TaskConfiguration> getTaskConfigs(boolean firstSetup) {
    return super.getJobs(firstSetup);
  }

}
