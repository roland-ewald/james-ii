/*
 * The general modeling and simulation framework JAMES II.
 * Copyright by the University of Rostock.
 * 
 * LICENCE: JAMESLIC
 */
package org.jamesii.gui.tooltip;

import org.jamesii.gui.syntaxeditor.DefaultLexerToken;

/**
 * This class represents the render tokens that are generated by the styled
 * tooltip parser {@link StyledToolTipParser} and are used by the
 * {@link StyledToolTip} for rendering purposes. It is just a simple token with
 * start position and length in the specified tooltip text plus it defines a
 * state for the very token.<br/>
 * The state holds information like font, font style, font size, color and so on
 * and can be retrieved using {@link #getState()}
 * 
 * 
 * @author Stefan Rybacki
 * @see StyledToolTip
 * @see StyledToolTipParser
 * 
 */
class StyledToolTipToken extends DefaultLexerToken<StyledToolTipToken.Type> {
  /**
   * render state for this token
   */
  private StyleState state;

  /**
   * Creates a token that can be used by the {@link StyledToolTip} for rendering
   * purposes
   * 
   * @param type
   *          type of token
   * @param start
   *          start position of token
   * @param length
   *          length of token
   * @param state
   *          displaying state of token
   * @see StyleState
   * @see Type
   */
  public StyledToolTipToken(Type type, int start, int length, StyleState state) {
    super(type, start, length);
    this.state = new StyleState(state);
  }

  /**
   * @return the displaying state (font, font size, color, font style, ...)
   */
  public final StyleState getState() {
    return state;
  }

  /**
   * The type the token can represent.
   * 
   * @author Stefan Rybacki
   */
  public enum Type {
    /**
     * token represents text
     */
    TEXT, /**
     * token represents a line break
     */
    LINEBREAK, /**
     * token represents a horizontal line
     */
    LINE, /**
     * token represents a width token
     */
    WIDTH, /**
     * token represents a height token
     */
    HEIGHT
  }
}
