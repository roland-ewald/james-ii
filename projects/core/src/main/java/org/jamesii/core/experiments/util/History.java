/*
 * The general modelling and simulation framework JAMES II.
 * Copyright by the University of Rostock.
 * 
 * LICENCE: JAMESLIC
 */
package org.jamesii.core.experiments.util;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.jamesii.core.experiments.TaskConfiguration;

/**
 * The History class maintains a list of configurations generated by an
 * experiment (the history of configurations).
 * 
 * This simple implementation of a history may require an unbounded amount of
 * memory. This means that depending on the number of computations the need
 * might arise to remove older results from the internal lists, or to extend the
 * class so that it makes use of file based cache for older results.
 * 
 * @author Jan Himmelspach
 * 
 */
public class History implements Serializable {

  /**
   * The constant serial version id.
   */
  private static final long serialVersionUID = 7491085071401963769L;

  /**
   * The default maximum number of entries.
   */
  private static final int DEFAULTMAX = 100;

  /**
   * Maximal size of the history, i.e., the maximal size of
   * {@link org.jamesii.core.experiments.BaseExperiment#configurations} and
   * {@link org.jamesii.core.experiments.BaseExperiment#results}.
   */
  private int maxSize = DEFAULTMAX;

  /**
   * The factor by which the history will be cut off once it passes its maximal
   * size.
   */
  private double shrinkFactor = 0.5;

  /** Get list of generated simulation configurations. */
  private List<TaskConfiguration> configurations = new ArrayList<>();

  /**
   * Add a new configuration to the history. Add will not check whether the max
   * size has been reached - please call the {@link #checkHistorySize()} method
   * afterwards to make sure that the history remains in its predefined bounds.
   * 
   * @param taskConfiguration
   *          the task configuration to be added to the history
   */
  public void add(TaskConfiguration taskConfiguration) {
    configurations.add(taskConfiguration);
  }

  /**
   * Checks whether the history and results storage needs a truncation. These
   * entries will be removed and those removed will be returned to the caller.
   * 
   * @return list of configuration removed from the history
   */
  public List<TaskConfiguration> checkHistorySize() {
    List<TaskConfiguration> result = new ArrayList<>();
    if (configurations.size() < maxSize) {
      return result;
    }
    int itemsToBeRemoved =
        (int) Math.min(configurations.size() * shrinkFactor,
            configurations.size() - 1);
    for (int i = 0; i < itemsToBeRemoved; i++) {
      result.add(configurations.get(i));
    }
    configurations.subList(0, itemsToBeRemoved).clear();
    return result;
  }

  /**
   * The number of configurations in the history.
   * 
   * @return
   */
  public int size() {
    return configurations.size();
  }

  /**
   * Get the configuration at the given index.
   * 
   * @param index
   * @return
   */
  public TaskConfiguration get(int index) {
    return configurations.get(index);
  }

  /**
   * Get the list of configurations.
   * 
   * @return
   */
  public List<TaskConfiguration> getConfigurations() {
    return configurations;
  }

  /**
   * Clear the history.
   */
  public void clear() {
    configurations.clear();
  }

  /**
   * Gets the max history size ( {@link #maxSize} ).
   * 
   * @return the max history size
   */
  public int getMaxSize() {
    return maxSize;
  }

  /**
   * Sets the max history size ( {@link #maxSize} ).
   * 
   * @param maxSize
   *          the new max history size
   */
  public void setMaxSize(int maxSize) {
    this.maxSize = maxSize;
  }

  /**
   * Gets the history shrink factor ( {@link #shrinkFactor} ).
   * 
   * @return the history shrink factor
   */
  public double getShrinkFactor() {
    return shrinkFactor;
  }

  /**
   * Sets the history shrink factor.
   * 
   * @param shrinkFactor
   *          the new history shrink factor
   */
  public void setShrinkFactor(double shrinkFactor) {
    this.shrinkFactor = shrinkFactor;
  }

}
