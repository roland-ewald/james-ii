/*
 * The general modelling and simulation framework JAMES II.
 * Copyright by the University of Rostock.
 * 
 * LICENCE: JAMESLIC
 */
package org.jamesii.simspex.spdm.util;


import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;

import org.jamesii.SimSystem;
import org.jamesii.core.util.misc.Pair;
import org.jamesii.simspex.spdm.evaluation.perfmeasures.IPredictorPerformanceMeasure;
import org.jamesii.simspex.spdm.evaluation.perfmeasures.PredictorPerformance;


/**
 * Auxiliary functions for predictor performance analysis.
 * 
 * @see org.jamesii.asf.spdm.generators.IPerformancePredictor
 * 
 * @author Steffen Torbahn
 * @author Roland Ewald
 * 
 */
public final class PredictorPerformanceAnalysis {

  /**
   * Should not be instantiated.
   */
  private PredictorPerformanceAnalysis() {
  }

  /**
   * Calculates average performance measures for a list of predictor performance
   * items.
   * 
   * @param predictorPerformances
   *          predictor performances (generated by an evaluation strategy, such
   *          as cross-validation)
   * @return mapping from predictor performance measure to its average values as
   *         tuples (avg prediction error sum, avg #trials with which each
   *         predictor was tested)
   */
  public static Map<Class<? extends IPredictorPerformanceMeasure>, Pair<Double, Integer>> getAverages(
      List<PredictorPerformance> predictorPerformances) {

    HashMap<Class<? extends IPredictorPerformanceMeasure>, Pair<Double, Integer>> avgMeasures =
        new HashMap<>();

    Set<Class<? extends IPredictorPerformanceMeasure>> keys =
        predictorPerformances.get(0).getPerformanceMeasures().keySet();

    for (Class<? extends IPredictorPerformanceMeasure> perfMeasure : keys) {
      double errorAverage = 0.0;
      int predCountAverage = 0;
      int numOfVals = 0;

      for (PredictorPerformance predPerf : predictorPerformances) {
        if (predPerf.getPerformanceMeasures().containsKey(perfMeasure)) {
          Pair<Double, Integer> error =
              predPerf.getPerformanceMeasures().get(perfMeasure);
          errorAverage += error.getFirstValue();
          predCountAverage += error.getSecondValue();
          numOfVals++;
        } else {
          SimSystem.report(Level.WARNING, "Key '" + perfMeasure.getName()
              + "' not found!");
        }
      }

      errorAverage = errorAverage / numOfVals;
      predCountAverage = predCountAverage / numOfVals;
      avgMeasures.put(perfMeasure, new Pair<>(errorAverage,
          predCountAverage));
    }

    return avgMeasures;
  }

}
